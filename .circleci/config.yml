version: 2
jobs:
  checkout_code:
    docker:
      - image: circleci/node:latest
    working_directory: ~/christianrebelsky.com
    steps:
      - run: node -v
      - checkout
      - attach_workspace:
          at: ~/christianrebelsky.com
      - restore_cache:
          keys:
            - yarn-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-{{ .Branch }}
            - yarn-cache-
      - run: yarn install
      - save_cache:
          key: yarn-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths: node_modules
      - persist_to_workspace:
          root: .
          paths: .
  check_vulnerabilities:
    docker:
      - image: circleci/node:latest
    working_directory: ~/christianrebelsky.com
    steps:
      - attach_workspace:
          at: ~/christianrebelsky.com
      - run: yarn install
      - run: |
          if [ "${CIRCLE_BRANCH}" == "production" ]; then
            yarn validate:dependencies
          else
            yarn validate:dependencies || true
          fi
  build:
    docker:
      - image: circleci/node:latest
    working_directory: ~/christianrebelsky.com
    steps:
      - attach_workspace:
          at: ~/christianrebelsky.com
      - run: yarn install
      - run: yarn build
      - persist_to_workspace:
          root: .
          paths: .
  app_deployment_stage:
    docker:
      - image: circleci/node:latest
    working_directory: ~/christianrebelsky.com
    steps:
      - attach_workspace:
          at: ~/christianrebelsky.com
      - run:  echo 'deploying branch'
      - add_ssh_keys
      - run:
          name: add key to known hosts
          command: |
            ssh-keyscan $DROPLET_IP >> ~/.ssh/known_hosts
      - deploy:
          name: deploy to DO server
          command: |
            scp -o StrictHostKeyChecking=no -r ~/christianrebelsky.com/public $DROPLET_USER@$DROPLET_IP:/var/www/christianrebelsky-stage/
  asset_deployment_stage:
    docker:
      - image: circleci/node:latest
    working_directory: ~/christianrebelsky.com
    steps:
      - attach_workspace:
          at: ~/christianrebelsky.com
      - run:
          name: Install aws cli
          command: |
            sudo apt-get install -y python-pip
            sudo apt-get install python2.7-dev
            sudo pip install awscli
            aws configure set aws_access_key_id $DO_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $DO_SECRET_ACCESS_KEY
      - deploy:
          name: deploy to DO space
          command: |
            aws --endpoint-url $DO_SPACES_ENDPOINT --region $DO_SPACES_REGION --output json s3 sync ~/christianrebelsky.com/public/icons s3://cr-asset-space/test --delete --acl public-read
  s3_deployment_stage:
    docker:
      - image: circleci/node:latest
    working_directory: ~/christianrebelsky.com
    steps:
      - attach_workspace:
          at: ~/christianrebelsky.com
      - run:
          name: Install aws cli
          command: |
            sudo apt-get install -y python-pip
            sudo apt-get install python2.7-dev
            sudo pip install awscli
            aws configure set aws_access_key_id $STAGE_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $STAGE_SECRET_ACCESS_KEY
      - deploy:
          name: deploy to S3
          command: |
            aws s3 sync ~/christianrebelsky.com/public s3://$STAGE_BUCKET_NAME/ --delete --cache-control max-age=0,no-cache,no-store,must-revalidate --acl public-read
workflows:
  version: 2
  build_deploy:
    jobs:
      - checkout_code
      - check_vulnerabilities:
          requires:
            - checkout_code
      - build:
          requires:
            - checkout_code
      - app_deployment_stage:
          requires:
            - check_vulnerabilities
            - build
          filters:
            branches:
              ignore:
                - master
      - s3_deployment_stage:
          requires:
            - check_vulnerabilities
            - build
          filters:
            branches:
              ignore:
                - master
      - asset_deployment_stage:
          requires:
            - app_deployment_stage
          filters:
            branches:
              ignore:
                - master
